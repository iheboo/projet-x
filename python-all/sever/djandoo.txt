Create your environment:

------------------------------------------------------------------
| Mac/Linux: | python3 -m venv djangoPy3Env 
-------------+----------------------------------------------------
| Windows (command prompt): | python -m venv djangoPy3Env
>------------------------------------------------------------------
copy
Activate your environment:

------------------------------------------------------------------
| Mac/Linux: | source djangoPy3Env/bin/activate                         
------------------------------------------------------------------
| Windows (command prompt): | call djangoPy3Env\Scripts\activate       
------------------------------------------------------------------
| Windows (git bash) : | source djangoPy3Env/Scripts/activate         
------------------------------------------------------------------
copy
Install Django:

(djangoPy3Env) Windows/Mac:| pip install Django==2.2.4

////////////////////////////////////////////////////////////
With our Django virtual environment activated, create a new Django project. First navigate to where you want the project to be saved (for these first few assignments, that will be the python_stack/django/django_intro folder). Then run this command, specifying a project name of our choosing:

> cd python_stack/django/django_intro
django_intro> django-admin startproject your_project_name_herecopy
Let's test this out:

Navigate into the folder that was just created. A new Django project has just been created--let's run it!

django_intro> cd your_project_name_here
your_project_name_here> python manage.py runservercopy
Open localhost:8000 in a browser window. Hooray for CLIs (command-line interfaces)!

(Don't worry about the warning about unapplied migrations. It won't affect us for now, and we'll address it soon enough.)

Press ctrl-c to stop the server. Open up the project folder in your text editor. (Take note of the folder structure so far!) We'll be updating some of these files shortly.

For every app we want to add to our project, we'll do the following:
your_project_name_here> python manage.py startapp your_app_name_herecopy
The apps in a project CANNOT have the same name as the project.

In the text editor, find the settings.py file. It should be in a folder with the same name as our project. Find the variable INSTALLED_APPS, and let's add our newly created app:

your_project_name_here/your_project_name_here/settings.py
   INSTALLED_APPS = [
       'your_app_name_here', # added this line. Don't forget the comma!!
       'django.contrib.admin',
       'django.contrib.auth',
       'django.contrib.contenttypes',
       'django.contrib.sessions',
       'django.contrib.messages',
       'django.contrib.staticfiles',
   ]    # the trailing comma after the last item in a list, tuple, or dictionary is commonly accepted in Pythoncopy
For these next few steps, we are creating the route "/" to be associated with a specific function. Trust for now--we'll break this down in greater detail in the next tab. In the urls.py file, add a URL pattern for your new app. (You can delete the current admin pattern, or just ignore it for now). You will need to add an import for your views file.

your_project_name_here/your_project_name_here/urls.py
from django.urls import path, include           # import include
# from django.contrib import admin              # comment out, or just delete
urlpatterns = [
    path('', include('your_app_name_here.urls')),	   
    # path('admin/', admin.sites.urls)         # comment out, or just delete
]copy
Next, let's create a new urls.py file in the your_app_name_here folder. Put the following code
your_project_name_here/your_app_name_here/urls.py
from django.urls import path     
from . import views
urlpatterns = [
    path('', views.index),	   
]copy
And then actually put a function called index in our app's views.py file:

your_project_name_here/your_app_name_here/views.py
from django.shortcuts import render, HttpResponse
def index(request):
    return HttpResponse("this is the equivalent of @app.route('/')!")copy
Let's run our app again and check it out at localhost:8000/. Whew. We've done it!

your_project_name_here> python manage.py runserver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

We have a new Django project running, but what was all that code we added there at the end? 

project_name/project_name/urls.py
from django.urls import path, include
    
urlpatterns = [
    path('', include('app_name.urls')),
]copy
The urlpatterns is simply a variable that holds a list of urls that this project recognizes. Notice there are 2 arguments being passed to the url function:

a raw string representing a route pattern (in our example: '')
what to do if the pattern matches (in our example: include('app_name.urls'))
The second argument, include('app_name.urls') will resolve the rest of the route. So let's go there:

project_name/app_name/urls.py
from django.urls import path
from . import views	# the . indicates that the views file can be found in the same directory as this file
                    
urlpatterns = [
    path('', views.index),
]copy
This is the same url function, but this time our arguments indicate that:

'' - the rest of the route both starts and ends with nothing (i.e. "/" is the full route), and
views.index - if the requested route matches this pattern, then the function with the name "index" from this app's views.py file will be invoked.
If the route wants a views.index function, then we'd better have one:

project_name/app_name/views.py
from django.shortcuts import render, HttpResponse
def index(request):
    return HttpResponse("response from index method from root route, localhost:8000!")copy
A couple of important things to notice here:

Every function's first argument will be the request object.
We don't distinguish in our routes anywhere between GET vs POST requests. This will be done within a given function.
If we are returning a string, we cannot simply return a string, but must send the string via HttpResponse (which must be imported. We'll be returning rendered templates again soon enough!)


*/*/*/*/*/*/*/*
some_project/some_app/urls.py
urlpatterns = [
        path('bears', views.one_method),                        # would only match localhost:8000/bears
        path('bears/<int:my_val>', views.another_method),       # would match localhost:8000/bears/23
        path('bears/<str:name>/poke', views.yet_another),       # would match localhost:8000/bears/pooh/poke
    	path('<int:id>/<str:color>', views.one_more),           # would match localhost:8000/17/brown
]copy
The corresponding functions would then look like this:

some_project/some_app/views.py
def one_method(request):                # no values passed via URL
    pass                                
    
def another_method(request, my_val):	# my_val would be a number from the URL
    pass                                # given the example above, my_val would be 23
    
def yet_another(request, name):	        # name would be a string from the URL
    pass                                # given the example above, name would be 'pooh'
    
def one_more(request, id, color): 	# id would be a number, and color a string from the URL
    pass                                # given the example above, id would be 17 and color would be 'brown'

*/*/*/*-/*/*/-*/-*/-*/-*/-*/-*/-*/
Response Types
In Django, there are many different ways we can return a response.  We will look into returning a HTML template in the next lesson, for now let's focus on these.

HttpResponse: Can be used to pass a string as a response.
Redirect: Used to navigate to a different view method, before a final response is sent to the client. ***Note*** Even though we don't include the first / in our project urls.py file, when redirecting, you should provide the whole path, starting with the first /.
JsonResponse: Used to return a JSON object
urls.py

from django.urls import path
from . import views
urlpatterns = [
    path('', views.root_method),
    path('another_route', views.another_method),
    path('redirected_route', views.redirected_method
]copy
views.py

from django.shortcuts import HttpResponse, redirect # add redirect to import statement
from django.http import JsonResponse
def root_method(request):
    return HttpResponse("String response from root_method")
def another_method(request):
    return redirect("/redirected_route")
def redirected_method(request):
    return JsonResponse({"response": "JSON response from redirected_method", "status": True})

 python manage.py makemigrations
  > python manage.py migrate

python manage.py shell

python manage.py makemigrations your_app_name
python manage.py migrate

(djangoPy3Env) pip install bcrypt
>>> import bcrypt
>>> hash1 = bcrypt.hashpw('test'.encode(), bcrypt.gensalt()).decode()
>>> print(hash1)
$2b$12$Wdc2qwiP6u0WdQdKwmer7.DMIcY6q76GxvrJgaodnpRDmpP8mwkDa